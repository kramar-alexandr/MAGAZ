remote procedure IVCashVc_StoreEInvoice(record IVCashVc,record IVCashVc,LongInt);
remote procedure IVCashVcRecordDefaultsClientRemote(var record IVCashVc,record LocalMachineBlock);
external procedure ResetDisplayDsm();
external procedure SetPOSWindowDisplayChange(val);
external procedure SetPOSWindowDisplayAmount(string,val);
external function Boolean NPTSIVCashDClassOnOpenWindowExecute(Integer);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external function Integer TestCleanCashIdentity(Boolean,record LSerialPortDeviceVc,string,var string);
external updating function Integer IVCashVc_SendToSerialPortDevices2(Integer,LongInt,record IVCashVc,record IVCashVc);
remote updating procedure RecordActionIVCash_Print2(var record IVCashVc,string,string,Boolean);
external procedure RemoveOldCustObjects(string,var string);
remote updating procedure IVCashVc_Invalidate(var record IVCashVc);
external function Boolean IsSessionOpen(string,string,Date,Time); //Edit***************************Sasha2,14:44 08.09.2016
external updating procedure OpenPOSSessionsm(string,date,time); //Edit***************************Sasha2,14:51 08.09.2016
external procedure ShowMoneyInBoxForIVCash(); //Edit***************************Sasha2,13:58 17.11.2016
external function LongInt DaysInYear(Integer); //Edit***************************Sasha2,15:05 07.03.2017
external procedure OpenDaySessionAuthenticationWin(); //Edit***************************Sasha2,15:25 07.03.2017
external procedure UpdateDaySessionDataLines(Integer,var record IVCashVc); //Edit***************************Sasha2,16:21 09.03.2017

updating procedure SaveOffLineLastIVCashNr(LongInt sernr)
begin
  record OffLineSetBlock OffLineSetRec;
  record LocalOffLineNrBlock LastRecNr;
  Integer offlinecomp;
  
  BlockLoad(OffLineSetRec);
  offlinecomp = StringToInt(OffLineSetRec.OffLineComp);
  if (offlinecomp>0) or (ServingClient==false) then begin
    BlockLoad(LastRecNr);    
    LastRecNr.LastIVCashNr = sernr;
    BlockStore(LastRecNr);  
  end;
  return;
end;

updating procedure UpdateLastSerNrBlock(string LocalMachineCode,LongInt SerNr)
BEGIN
  record LastSerNrBlock LastSerNrRec;
  row LastSerNrBlock LastSerNrrw;
  Integer i,rwcnt;
  Boolean found;
  
  if ((nonblank(LocalMachineCode)) and (SerNr>0)) then begin
    BlockLoad(LastSerNrRec);
    rwcnt = MatRowCnt(LastSerNrRec);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LastSerNrRec,i,LastSerNrrw);
      if (LastSerNrrw.LocalMachineCode==LocalMachineCode) then begin
        LastSerNrrw.LastIVCashNr = SerNr;
        MatRowPut(LastSerNrRec,i,LastSerNrrw);
        i = rwcnt;
        found = true;
      end;
    end;
    if (found==false) then begin
      LastSerNrrw.LocalMachineCode = LocalMachineCode;
      LastSerNrrw.LastIVCashNr = SerNr;
      MatRowPut(LastSerNrRec,rwcnt,LastSerNrrw);
    end;
    BlockStore(LastSerNrRec);
  end;
  RETURN;
END;

/*
This is Dollarstores Defaults, which I belive is better (once translated).
global
function LongInt IVCashVcRecordDefaultsClient(LongInt wn,var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;

  SetupIVCashRecord(IVCashr);
  if (blank(IVCashr.Location)) then begin
    MessageBox(0,"LagerstŠlle saknas, kontrollera instŠllningen Lokal Maskin!");
  end else begin
    Userr.Code = CurrentUser;
    if (ReadFirstMain(Userr,1,true)) then begin end;
    if (Userr.Location!=IVCashr.Location) then begin
      MessageBox(0,"Denna anvŠndaren Šr instŠlld pŒ ett annat lagerstŠlle Šn denna kassa, kontrollera instŠllningarna!");
      res = -1;
    end else begin
      if (IVCashr.InclVAT!=1) then begin
        MessageBox(0,"Defaultkunden mŒste vara instŠlld med en prislista inklusive moms. €ndra instŠllningar!");
        res = -1;    
      end;
    end;
  end;
  
  IVCashVcRecordDefaultsClient = res;
  RETURN;
END;
*/

function LongInt UTCDateToDays(Date dat)
begin
  LongInt res;
  Integer i;
  LongInt dir;

  res = 0;
  for (i=1970;i<dat.year;i=i+1) begin
    res = res + DaysInYear(i);
  end;

  for (i=1;i<dat.month;i=i+1) begin
    res = res + DaysInMonth(dat.Year,i);
  end;
  res = res + dat.day - 1;
  UTCDateToDays = res;
  return;
end;

global  //Edit***************************Sasha2,13:10 07.03.2017 {
updating procedure ClearDaySessionBlock()
begin
  record DaySessionBlock DSCBl;
  time blankt;
  date blankd;
    
    blockload(DSCBl);
    if (nonblank(DSCBl.DaySessionCashiers) or DSCBl.TransDate!=blankd or DSCBl.DaySessionStartTime!=blankt or DSCBl.DaySessionEndTime!=blankt) then begin
      DSCBl.DaySessionCashiers = "";
      DSCBl.TransDate = blankd;
      DSCBl.DaySessionStartTime = blankt;
      DSCBl.DaySessionEndTime = blankt;
      BlockStore(DSCBl);
    end;
    
  return;
end; //Edit***************************Sasha2,13:10 07.03.2017 }

global //Edit***************************Sasha2,13:10 07.03.2017 {
function LongInt CheckDaySessionCashiersIsValid(date forDate,time forTime)
begin
  record DaySessionBlock DSCBl;
  record CashierDefBlock CDBl;
  Integer res;
  time blankt;
  date blankd,maxDate;
  longint firstDateMins,secondDateMins;
    
    res = 0;
    blockload(DSCBl);
    blockload(CDBl);
    if (CDBl.DaySessionStartTime!=blankt and CDBl.DaySessionEndTime!=blankt) then begin
      if (blank(DSCBl.DaySessionCashiers) or DSCBl.TransDate==blankd or DSCBl.DaySessionStartTime==blankt or DSCBl.DaySessionEndTime==blankt) then begin
        res = -1;
      end;
      if (res==0) then begin
        if (DSCBl.DaySessionStartTime>=DSCBl.DaySessionEndTime) then begin
          maxDate = AddDay(DSCBl.TransDate,1);
        end else begin
          maxDate = DSCBl.TransDate;
        end;
        firstDateMins = UTCDateToDays(forDate)*24*60 + GetHour(forTime) * 24 + GetMinute(forTime);
        secondDateMins = UTCDateToDays(maxDate)*24*60 + GetHour(DSCBl.DaySessionEndTime) * 24 + GetMinute(DSCBl.DaySessionEndTime);
        
        if (secondDateMins-firstDateMins<0) then begin
          res = -1;
        end;
      end;
    end;
    if (res==-1) then begin
      qupdating.ClearDaySessionBlock;
    end;
    
    CheckDaySessionCashiersIsValid = res;
  return;
end; //Edit***************************Sasha2,13:10 07.03.2017 }

global
updating function LongInt IVCashVcRecordDefaultsClient(LongInt wn,var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record LocalMachineBlock LMb;
  time blankt;
  date blankd;
  record DaySessionBlock DSCBl; //Edit***************************Sasha2,14:23 09.03.2017

  BlockLoad(LMb);

  IVCashVcRecordDefaultsClientRemote(IVCashr,LMb);
  switch (GetWindowClass(wn)) begin
    case "NPTSIVCashDClass":
      NPTSIVCashDClassOnOpenWindowExecute(wn);
      ResetDisplayDsm;
      ShowMoneyInBoxForIVCash; //Edit***************************Sasha2,13:58 17.11.2016
//      ReRunWindowDef(wn);//in NPTSIVCashDClassOnOpenWindowExecute
  end;
  
  /*if (IsSessionOpen(IVCashr.LocalMachineCode,IVCashr.DrawerCode,CurrentDate,CurrentTime)==false) then begin //Added than commented  Edit***************************Sasha2,15:41 08.09.2016
    OpenPOSSessionsm(CurMachineName,blankd,blankt);
  end;*/
  
  //Edit***************************Sasha2,15:40 09.03.2017 {
  if (CheckDaySessionCashiersIsValid(IVCashr.InvDate,IVCashr.TransTime)!=0) then begin
    OpenDaySessionAuthenticationWin; 
  end else begin
    BlockLoad(DSCBl);
    if (NonBlank(DSCBl.DaySessionCashiers)) then begin
      IVCashr.DaySessionCashiers = DSCBl.DaySessionCashiers;
      IVCashr.DaySessionStartTime = DSCBl.DaySessionStartTime;
      IVCashr.DaySessionEndTime = DSCBl.DaySessionEndTime;
      UpdateDaySessionDataLines(wn,IVCashr);
    end;
  end; //Edit***************************Sasha2,15:40 09.03.2017 }
  
  IVCashVcRecordDefaultsClient = res;
  return;
end;

global
function LongInt IVCashVcRecordDuplicateClient(LongInt wn,var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  IVCashVcRecordDefaultsClientRemote(IVCashr,LMb);
  IVCashVcRecordDuplicateClient = res;
  return;
end;

global
updating function LongInt IVCashVcRecordUpdateClient(LongInt wn,var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  record AutoActionBlock AutoActionRec;
  record CashierDefBlock CDb;
  record LocalMachineBlock LMb;
  Integer oldprogmode;
  string 255 docname;
  Integer receiptres,noErr;

  noErr = 0;
  BlockLoad(CDb);

  if ((IVCash2p.OKFlag==0) and (IVCashp.OKFlag==1)) then begin
    BlockLoad(AutoActionRec);
    if (AutoActionRec.CashInvoicePrinting!=0) then begin
      if (CDb.CashSalesToFiscalControlUnit==0) then begin
        switch (IVCashp.InvType) begin
          case kPOSInvoiceTypeCredit: docname = "InvCashRetForm";
          otherwise docname = "InvCashForm";
        end;
        RecordActionIVCash_Print2(IVCashp,docname,"",false);
      end;
    end;
    /*
    if (ProgramType==typOffLine)then begin
      wn = FindWindow("IVCashDClass");
      RecordNew(IVCashr);
      nwn = OpenWindow("IVCashDClass",1,0,"","",IVCashr);
      CloseWindow(wn);
it should close the window but if it does there is a crash on PC
if we don't close the window soon we will have more then 100 windows open
    end;
*/
  end;
  BlockLoad(LMb);
  LMb.Bagger = IVCashp.Bagger;
  BlockStore(LMb);
  receiptres = IVCashVc_SendToSerialPortDevices2(kSerialPortDeviceClassFiscalPrinter,stat,IVCashp,IVCash2p);
  if (receiptres<>noErr and CDb.InvalIVCashOnPrtErr<>0) then begin
    if ((IVCash2p.OKFlag==0) and (IVCashp.OKFlag==1)) then begin
      IVCashVc_Invalidate(IVCashp);
      PutWindowRecord(wn,IVCashp);
      goto LIVCashVcRecordUpdateClient80;
    end;
  end;
  receiptres = IVCashVc_SendToSerialPortDevices2(kSerialPortDeviceClassFiscalControlUnit,stat,IVCashp,IVCash2p);
  if (receiptres<>noErr and CDb.InvalIVCashOnPrtErr<>0) then begin
    if ((IVCash2p.OKFlag==0) and (IVCashp.OKFlag==1)) then begin
      IVCashVc_Invalidate(IVCashp);
      PutWindowRecord(wn,IVCashp);
      goto LIVCashVcRecordUpdateClient80;
    end;
  end;
LIVCashVcRecordUpdateClient80:;
  ResetDisplayDsm;
  if (HasLocalization("MEX")) then begin
    oldprogmode = SetCompanyProgramMode(kProgramModeClient);
    IVCashVc_StoreEInvoice(IVCashp,IVCash2p,stat);
    ResetCompanyProgramMode(oldprogmode);
  end;
  res = 1;
  ReRunWindowDef(wn);
  IVCashVcRecordUpdateClient = res;
  return;
end;

global
updating function LongInt IVCashVcRecordSaveClient(LongInt wn,var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record IVCashVc IVCashr;
  record AutoActionBlock AutoActionRec;
//  record LocalMachineBlock LocalMachineRec;
  record CashierDefBlock CDb;
  record LocalMachineBlock LMb;
  Integer oldprogmode,receiptres,noErr;
  string 255 docname;

  noErr = 0;
  BlockLoad(CDb);

  if (IVCashp.OKFlag!=0) then begin
    BlockLoad(AutoActionRec);
    if (AutoActionRec.CashInvoicePrinting!=0) then begin
      if (CDb.CashSalesToFiscalControlUnit==0) then begin
        switch (IVCashp.InvType) begin
          case kPOSInvoiceTypeCredit: docname = "InvCashRetForm";
          otherwise docname = "InvCashForm";
        end;
        RecordActionIVCash_Print2(IVCashp,docname,"",false);
      end;
    end;
  end;
//  BlockLoad(LocalMachineRec); //done on default and duplicate
//  IVCashp.LocalMachineCode = LocalMachineRec.LocalMachineCode;
  SaveOffLineLastIVCashNr(IVCashp.SerNr);//on save only
  BlockLoad(LMb);
  LMb.Bagger = IVCashp.Bagger;
  BlockStore(LMb);
  receiptres = IVCashVc_SendToSerialPortDevices2(kSerialPortDeviceClassFiscalPrinter,Rs_insert,IVCashp,IVCash2p);
  if (receiptres<>noErr and CDb.InvalIVCashOnPrtErr<>0) then begin
    if (IVCashp.OKFlag==1) then begin
      IVCashVc_Invalidate(IVCashp);
      PutWindowRecord(wn,IVCashp);
      goto LIVCashVcRecordSaveClient80;
    end;
  end;
  receiptres = IVCashVc_SendToSerialPortDevices2(kSerialPortDeviceClassFiscalControlUnit,Rs_insert,IVCashp,IVCash2p);
  if (receiptres<>noErr and CDb.InvalIVCashOnPrtErr<>0) then begin
    if (IVCashp.OKFlag==1) then begin
      IVCashVc_Invalidate(IVCashp);
      PutWindowRecord(wn,IVCashp);
      goto LIVCashVcRecordSaveClient80;
    end;
  end;
LIVCashVcRecordSaveClient80:;
  SetPOSWindowDisplayChange(IVCashp.RetValue);
  if (HasLocalization("MEX")) then begin
    oldprogmode = SetCompanyProgramMode(kProgramModeClient);
    IVCashVc_StoreEInvoice(IVCashp,IVCash2p,stat);
    ResetCompanyProgramMode(oldprogmode);
  end;
  res = 1;
  IVCashVcRecordSaveClient = res;
  return;
end;

global
function LongInt IVCashVcRecordCheckClient(Longint wn,record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt stat,LongInt errorcheck)
begin
  LongInt res;
  Boolean checkf,testf,testfcleancashf;
  record IVCashVc credIVr;
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
  string 255 errstr;
  Integer err;
  record CashierDefBlock CDb;
  record DaySessionBlock DSCBl; //Edit***************************Sasha2,14:23 09.03.2017
  
//no client-server calls pls
  res = 0;
  checkf = errorcheck>0;
  BlockLoad(LMb); 
  BlockLoad(CDb);
  
  //Edit***************************Sasha2,14:25 09.03.2017 {
  if (UserCanAction("UnOKAll",true) == false) then begin
    if (CheckDaySessionCashiersIsValid(IVCashr.InvDate,IVCashr.TransTime)!=0) then begin
      RecordCheckError(50015,"",-1,"SerNr");      
      res = -1;
      goto LIVCashVcRecordCheckClient;
    end else begin
      BlockLoad(DSCBl);
      if (NonBlank(DSCBl.DaySessionCashiers)) then begin
        IVCashr.DaySessionCashiers = DSCBl.DaySessionCashiers;
        IVCashr.DaySessionStartTime = DSCBl.DaySessionStartTime;
        IVCashr.DaySessionEndTime = DSCBl.DaySessionEndTime;
      end; 
    end;  
  end;
  //Edit***************************Sasha2,14:25 09.03.2017 }
   
  if (HasLocalization("SWE")) then begin
    if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeA,LMb.LocalMachineCode,LSPDr)) then begin  
      testfcleancashf = false;
      switch (stat) begin
        case Rs_normal:
          testf = true;
          if (testf) then begin
            testfcleancashf = true;
          end;
        case Rs_insert:
          testf = true;
          if (testf) then begin
            testfcleancashf = true;
          end;
        case Rs_update:
          testf = true;
          if ((IVCash2r.Invalid!=0) or (IVCashr.Invalid!=0)) then begin
            testf = false;
          end;          
          if (testf) then begin
            testfcleancashf = true;
          end;
      end;
      if (testfcleancashf) then begin
        if (blank(LMb.LocalMachineCode)) then begin
          RecordCheckError(1770,"",-1,"SerNr");      
          res = -1;
          goto LIVCashVcRecordCheckClient;        
        end;
        err = TestCleanCashIdentity(true,LSPDr,LMb.TerminalID,errstr);
        if (err!=0) then begin
          RecordCheckError(err,": " & errstr,-1,"SerNr");      
          res = -1;
          goto LIVCashVcRecordCheckClient;        
        end;
      end;
    end else begin
      if (CDb.CashSalesToFiscalControlUnit!=0) then begin
        if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeC,LMb.LocalMachineCode,LSPDr)==false) then begin
          RecordCheckError(22123,"",-1,"SerNr");      
          res = -1;
          goto LIVCashVcRecordCheckClient;        
        end;
      end;
    end;
  end;
LIVCashVcRecordCheckClient:;  
  IVCashVcRecordCheckClient = res;
  return;
end;

global
function LongInt IVCashVcRecordProtectFields(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  IVCash2r.Prntdf = IVCashr.Prntdf;
  //IVCash2r.TaxAdminServSeal = IVCashr.TaxAdminServSeal;//why did we need this?? this broke fiscalization procedure cause WindowDoOK didn't see this field
  IVCashVcRecordProtectFields = res;
  RETURN;
END;
