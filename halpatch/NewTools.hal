external procedure ExtractObj(string,var Integer,var string);
external function Boolean PasteInvIn2OPr(var record OPVc,Integer,Date,Integer,val,var string,Boolean,var Boolean);
external procedure OPVc_PasteVECode(var record OPVc,Integer);
external procedure OPVc_PasteRecVal(var record OPVc,Integer);
external procedure NoDupObjs(string,var string);
external updating procedure RemoveEmptyIVCashCallback(array LongInt);
external function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);
remote function Integer PUVc_PasteSellPrice(var record PUVc,Integer,Boolean); //Edit***************************Sasha2,16:59 03.03.2017
external procedure PUSumUp(var record PUVc); //Edit***************************Sasha2,16:59 03.03.2017
external function val AbsoluteVal(val);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Integer CountObjects(string);
external procedure TRSumup(var record TRVc,var val);
external function Boolean GetAccName(string,var string,Integer);
external function roundmode DefaultRoundMode();
external function Integer GetIntYc(Date);

/*global 
function Boolean LocMachDrawerVcRecordShouldBeSynchronised(record LocMachDrawerVc LocMachDrawerr,string tagstr)
begin
  Boolean res;
  
  res = true; LogText(0,"LocMachDrawerVcRecordShouldBeSynchronised");
  LocMachDrawerVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean LocMachDrawerVcRecordSync(record LocMachDrawerVc LocMachDrawerr,string tagstr)
begin
  Boolean res;
  
  res = true; LogText(0,"LocMachDrawerVcRecordSync");
  LocMachDrawerVcRecordSync = res;
  return;
end;*/

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure CustomRegisterRemoveMn(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  record POSEventVc POSEventr;
  record CashVc Cashr;
  record POSBalanceVc POSBalancer;
  record CashierBalVc CashierBalr;
  record CLInVc CLInr;
	record CLOutVc CLOutr;
	record IPVc IPr;
	record OPVc OPr;
	record IVVc IVr;
	record VIVc VIr;
	record POVc POr;
	record SHVc SHr;
	record PUVc PUr;
	record SDVc SDr;
	record StockMovVc StockMovr;
	record RetVc Retr;
	record RetPUVc RetPUr;
	record StockTakeVc StockTaker;
	record SRVc SRr;
	record ORVc ORr;
	record TRVc TRr;
	record FBVc FBr;
	record ItemHistVc IHr;
	record ItemStatusVc ISr;
	record SerBalVc SerBalr;
	record PPVc PPr;
	record CUVc CUr;
	record INVc INr;
	record APVc APr;
	record ARVc ARr;
	record OPrsVc OPrsr;
	record IPrsVc IPrsr;
	record RecVc Recr; //Структуры (Рецепты)
	record ProdOrderVc ProdOrderr;
	record ProdVc Prodr;
	
	record SynkDBIDRegVc SynkDBIDRegr;
	record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr;
	record SynkDBIDTakenSerVc SynkDBIDTakenSerr;
	record SynkGlobalDBIDTakenSerVc SynkGlobalDBIDTakenSerr;
	record SynkGlobalAutoSerVc SynkGlobalAutoSerr;
	
	/*record ITVc ITr;
	record CTypeVc CTyper;
	record UnitVc Unitr;
	record ActVc Actr;
	record ObjVc Objr;
	record LocationVc Locationr;
	record PDVc PDr;
	record CurncyCodeVc CurncyCoder;*/

	Boolean TrHs;
	
  TrHs = true;
	while (LoopMain(IVCashr,1,TrHs)) begin
		recorddelete(IVCashr);
		StepBack(IVCashr);
	end;
	
	TrHs = true;
	while (LoopMain(POSEventr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSEventr);
	    StepBack(POSEventr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Cashr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Cashr);
	    StepBack(Cashr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(POSBalancer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSBalancer);
	    StepBack(POSBalancer);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(CashierBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CashierBalr);
	    StepBack(CashierBalr);
	  end;
	end;

  TrHs = true;
	while (LoopMain(CLInr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CLInr);
	    StepBack(CLInr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(CLOutr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CLOutr);
	    StepBack(CLOutr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPr);
	    StepBack(IPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IVr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IVr);
	    StepBack(IVr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(VIr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(VIr);
	    StepBack(VIr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(POr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POr);
	    StepBack(POr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(OPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPr);
	    StepBack(OPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(SHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SHr);
	    StepBack(SHr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(PUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PUr);
	    StepBack(PUr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(SDr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SDr);
	    StepBack(SDr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(StockMovr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(StockMovr);
	    StepBack(StockMovr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(Retr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Retr);
	    StepBack(Retr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RetPUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RetPUr);
	    StepBack(RetPUr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(ORr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ORr);
	    StepBack(ORr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(TRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(TRr);
	    StepBack(TRr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(FBr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(FBr);
	    StepBack(FBr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IHr);
	    StepBack(IHr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(ISr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ISr);
	    StepBack(ISr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SerBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SerBalr);
	    StepBack(SerBalr);
	  end;
	end; 

	TrHs = true;
	while (LoopMain(PPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PPr);
	    StepBack(PPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(CUr,1,TrHs)) begin
		RecordDelete(CUr);
		StepBack(CUr);
	end;

	TrHs = true;
	while (LoopMain(INr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(INr);
	    StepBack(INr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(ARr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ARr);
	    StepBack(ARr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(OPrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPrsr);
	    StepBack(OPrsr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(IPrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPrsr);
	    StepBack(IPrsr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(StockTaker,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(StockTaker);
	    StepBack(StockTaker);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(SRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SRr);
	    StepBack(SRr);
	  end;
	end; 
	
	//Clear up allocated serial numbers 
	TrHs = true;
	while (LoopMain(SynkDBIDRegr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkDBIDRegr);
	    StepBack(SynkDBIDRegr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(SynkGlobalDBIDRegr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkGlobalDBIDRegr);
	    StepBack(SynkGlobalDBIDRegr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(SynkDBIDTakenSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkDBIDTakenSerr);
	    StepBack(SynkDBIDTakenSerr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SynkGlobalDBIDTakenSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkGlobalDBIDTakenSerr);
	    StepBack(SynkGlobalDBIDTakenSerr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SynkGlobalAutoSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkGlobalAutoSerr);
	    StepBack(SynkGlobalAutoSerr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Recr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Recr);
	    StepBack(Recr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(ProdOrderr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ProdOrderr);
	    StepBack(ProdOrderr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Prodr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Prodr);
	    StepBack(Prodr);
	  end;
	end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure POSRegistersRemoveMn(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  record POSEventVc POSEventr;
  record CashVc Cashr;
  record POSBalanceVc POSBalancer;
  record CashierBalVc CashierBalr;
  record TRVc TRr;
	
	Boolean TrHs;
	
  TrHs = true;
	while (LoopMain(IVCashr,1,TrHs)) begin
		recorddelete(IVCashr);
		StepBack(IVCashr);
	end;

  TrHs = true;
	while (LoopMain(POSEventr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSEventr);
	    StepBack(POSEventr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Cashr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Cashr);
	    StepBack(Cashr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(POSBalancer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSBalancer);
	    StepBack(POSBalancer);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(CashierBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CashierBalr);
	    StepBack(CashierBalr);
	  end;
	end;
	
	TrHs = true;
	TRr.IntYc = RestAccYc;
	while (LoopMain(TRr,1,TrHs)) begin
	 if (TRr.IntYc!=RestAccYc) then begin TrHs = false; end;
	 if (TrHs) then begin
	   RecordDelete(TRr);
	   StepBack(TRr);
	 end;
	end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }
global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure RegistersRemoveOptionallyMn(record RcVc RepSpec)
begin
  record INVc INr;
	Boolean TrHs;
	
  if (RepSpec.flags[0]==1) then begin
  	while (LoopMain(INr,1,true)) begin
  		recorddelete(INr);
  		StepBack(INr);
  	end;
  end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }


global
function string 255 RetrieveStoreObject(var record ARVc APr) //for APSClass CalculatedColumn. APSClass uses APVc, but this function works with ARVc!
begin
  record VIVc VIr;
  record ObjVc Objr;
  string 20 storeObj,curObj;
  Integer pos;
  
    VIr.SerNr = APr.InvoiceNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      pos = 0;
      ExtractObj(VIr.Objects,pos,curObj);
      while (nonblank(curObj)) begin
        Objr.Code = curObj;
        if (ReadFirstMain(Objr,1,true) and Objr.OTCode=="STORE") then begin
          storeObj = Objr.Code;
          pos = len(VIr.Objects);
        end;
        ExtractObj(VIr.Objects,pos,curObj);
      end;
    end;
  
  RetrieveStoreObject = storeObj;
  return;
end;

global
updating procedure GetItemStatusInfoForOrder(var record ORVc ORr)
BEGIN
  record ItemStatusVc ISr;
  row ORVc ORrw;
  Integer rwcnt,i;
  
    if (NonBlank(ORr.Location)) then begin
      rwcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        if (NonBlank(ORrw.ArtCode)) then begin
          ISr.Code = ORrw.ArtCode;
          ISr.Location = ORr.Location;
          if (ReadFirstMain(ISr,2,true)) then begin
            ORrw.TotOrdQuant = ISr.Instock - ISr.OrddOut;
            MatRowPut(ORr,i,ORrw);
          end;
        end;
      end;
    end;
  
LGetItemStatusInfoForOrder:;

  RETURN;
END;

procedure GenerateOPVcFromVI(record VIVc VIr,var record OPVc OPr,var Integer result,var boolean createf)
begin
  record OPVc OP2r;
  record OPrsVc OPrsr;
  row OPVc OPrw,OP2rw;
  row VIVc VIrw;
  string 255 warning,objs;
  Boolean installmentf,TrHs,testf;
  val chk,bal;
  Integer rownr,rwcnt,i;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
      bal = bal + VIrw.PrepayAmount;
    end;
  end;
  
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = 1;
  TrHs = true;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    testf = true;
    if (OPrsr.VINr!=VIr.SerNr or OPrsr.TransType!=1) then begin TrHs = false; testf = false; end;
    if (OPrsr.VECode!=VIr.VECode) then begin testf = false; end;
    if (testf) then begin
      OP2r.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(OP2r,1,true)) then begin
        rwcnt = MatRowCnt(OP2r);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OP2r,i,OP2rw);
          if (OP2rw.VISerNr==VIr.SerNr) then begin
            bal = bal + OP2rw.RecVal;
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;
  
  bal = VIr.PayVal - bal;
  if (bal<=0) then begin
    createf = false;
    goto LGenerateOPVcFromVI;
  end;
  
  RECORDNEW(OPr);
  OPr.PayDate = VIr.InvDate;
  OPr.TransDate = VIr.InvDate;
  rownr = 0;
  ClearRow(OPr,OPrw,kPaymentRowTypeNormal);
  OPrw.VISerNr = VIr.SerNr;
  MatRowPut(OPr,rownr,OPrw);
  if (PasteInvIn2OPr(OPr,rownr,OPr.TransDate,1,chk,warning,false,installmentf)==false) then begin
    result = -1;
    goto LGenerateOPVcFromVI;
  end;
  if (installmentf) then begin
    result = 20772;
    goto LGenerateOPVcFromVI;
  end;
  MatRowGet(OPr,rownr,OPrw);
  OPrw.VECode = VIr.VECode;
  MatRowPut(OPr,rownr,OPrw);
  OPVc_PasteVECode(OPr,rownr);
  MatRowGet(OPr,rownr,OPrw);
  OPrw.RecVal = bal;
  MatRowPut(OPr,rownr,OPrw);
  OPVc_PasteRecVal(OPr,rownr);
  MatRowGet(OPr,rownr,OPrw);
  OPrw.Objects = OPrw.Objects & "," & VIr.Objects;
  NoDupObjs(OPrw.Objects,objs);
  OPrw.Objects = objs;
  MatRowPut(OPr,rownr,OPrw);
  
LGenerateOPVcFromVI:;
  return;
end;

global
updating function Integer CreateOPFromVI(record VIVc VIr,var record OPVc OPr)
begin
  Integer res;
  boolean createf;
  
  createf = true;
  GenerateOPVcFromVI(VIr,OPr,res,createf);
  
  if (createf) then begin
    if (OPr.SerNr==-1) then begin
      OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
    end;
    if (RecordInsert(OPr,true)) then begin
      CreateRecordLink(VIr,CurrentCompany,OPr,CurrentCompany);  
      CreateRecordLink(OPr,CurrentCompany,VIr,CurrentCompany);
    end else begin
      res = -1;
    end;
  end;
 
LCreateOPFromVI:;  
  CreateOPFromVI = res;
  return;
end;

global
updating function Integer CreateAutoPaidOPFromVI(record VIVc VIr)
begin
  record OPVc OPr,OP2r;
  record ObjVc Objr; 
  Integer res,pos;
  boolean createf;
  string 20 pmcode,curObj;
  
  createf = true;
  GenerateOPVcFromVI(VIr,OPr,res,createf);
  
  if (createf) then begin
    /*pos = 0;
    ExtractObj(VIr.Objects,pos,curObj);
    while (nonblank(curObj)) begin
      Objr.Code = curObj;
      if (ReadFirstMain(Objr,1,true) and Objr.OTCode=="STORE") then begin
        switch (Objr.Code) begin
          case "PEROVA":
            pmcode = "C1";
            pos = len(VIr.Objects);
          case "STALSKOGO":
            pmcode = "C2";
            pos = len(VIr.Objects);
        end;
      end;
      ExtractObj(VIr.Objects,pos,curObj);
    end;*/
    switch (CurrentCompany) begin
      case 1: pmcode = "C1";
      case 3: pmcode = "C2";
    end;
    if (NonBlank(pmcode)) then begin
      OPr.PayMode = pmcode;
      if (OPr.SerNr==-1) then begin
        OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
      end;
      OPr.OrderedFlag = 1;
      if (RecordInsert(OPr,true)) then begin
        CreateRecordLink(VIr,CurrentCompany,OPr,CurrentCompany);  
        CreateRecordLink(OPr,CurrentCompany,VIr,CurrentCompany);
        RecordCopy(OP2r,OPr);
        OPr.DoneFlag = 1;
        if (RecordUpdate(OP2r,OPr,true)!=0) then begin
          res = -1;
        end;
      end else begin
        res = -1;
      end;
    end;
  end;
 
LCreateAutoPaidOPFromVI:;  
  CreateAutoPaidOPFromVI = res;
  return;
end;

global
updating function Integer DeleteAutoPaidOPFromVI(record VIVc VIr)
begin
  record OPVc OPr,OP2r;
  record OPrsVc OPrsr;
  Integer res,rwcnt;
  Boolean TrHs,testf;
  
  res = 0;
  
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = 1;
  TrHs = true;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    testf = true;
    if (OPrsr.VINr!=VIr.SerNr or OPrsr.TransType!=1) then begin TrHs = false; testf = false; end;
    if (OPrsr.VECode!=VIr.VECode) then begin testf = false; end;
    if (testf) then begin
      OPr.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        rwcnt = MatRowCnt(OPr);
        if (rwcnt==1) then begin
          RecordCopy(OP2r,OPr);
          OPr.DoneFlag = 0;
          if (RecordUpdate(OP2r,OPr,true)==0) then begin
            RecordCopy(OP2r,OPr);
            OPr.OrderedFlag = 0;
            if (RecordUpdate(OP2r,OPr,true)==0) then begin
              RecordDelete(OPr);
              StepBack(OPrsr);
            end;
          end;
        end;
      end;
    end;
  end;
 
LDeleteAutoPaidOPFromVI:;  
  DeleteAutoPaidOPFromVI = res;
  return;
end;

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure SetUnitTextInItemIfNeededMn(record RcVc RepSpec)
begin
  record INVc INr;	

	 if (NonBlank(RepSpec.f1)) then begin
	   INr.Code = "";
	   while (LoopMain(INr,1,true)) begin
  		if (Blank(INr.Unittext)) then begin
  		  INr.Unittext = RepSpec.f1;
  		  RECORDSTORE(INr,true);
  		end;
  	end;
	 end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }

global //Edit***************************Sasha2,11:47 05.12.2016 {
updating procedure RemoveEmptyIVCash(array LongInt IVCashNrsToDelete,string locMach)
begin
  record IVCashVc IVCashr;
  boolean testf;
  Integer cnt,i;
  array LongInt DeletedIVCashNrs;
  
    cnt = IVCashNrsToDelete.length;
    for (i=0;i<cnt;i=i+1) begin
      IVCashr.SerNr = IVCashNrsToDelete[i];
      if (ReadFirstMain(IVCashr,1,true)) then begin
        testf = true;
        if (IVCashr.OKFlag!=0 or MatRowCnt(IVCashr)>0) then begin testf = false; end;
        if (testf) then begin
          DeletedIVCashNrs[DeletedIVCashNrs.length] = IVCashr.SerNr;
          LogText(0,"IVCash #" & IVCashr.SerNr & " was removed.");
          RecordDelete(IVCashr);
        end else begin
          LogText(0,"Cann't remove IVCash #" & IVCashr.SerNr & ". Record mismatch between Server and Client.");
        end;
      end else begin
        DeletedIVCashNrs[DeletedIVCashNrs.length] = IVCashNrsToDelete[i];
      end;
    end;

    if (DeletedIVCashNrs.length>0) then begin
      clientremoteasync.RemoveEmptyIVCashCallback(DeletedIVCashNrs);
    end;
    
  return;
end; //Edit***************************Sasha2,11:47 05.12.2016 }


global //Edit***************************Sasha2,16:35 14.12.2016 {
updating procedure UpdateTextFieldsForQuickSearchMn(record RcVc RepSpec)
begin
  record PUVc PUr;
  record POVc POr;
  record VIVc VIr;
  record OPVc OPr;
  record CLinVc CLinr;
  record CLoutVc CLoutr;
  record IVCashVc IVCashr;
  
    if (RepSpec.flags[0]==1) then begin
      PUr.SerNr = -1;
      while (LoopMain(PUr,1,true)) begin
        PUr.TransDateText = PUr.TransDate;
        RECORDSTORE(PUr,true);
      end;
    end;
    
    if (RepSpec.flags[1]==1) then begin
      POr.SerNr = -1;
      while (LoopMain(POr,1,true)) begin
        POr.TransDateText = POr.TransDate;
        POr.Sum4Text = POr.Sum4;
        RECORDSTORE(POr,true);
      end;
    end;
    
    if (RepSpec.flags[2]==1) then begin
      VIr.SerNr = -1;
      while (LoopMain(VIr,1,true)) begin
        VIr.InvDateText = VIr.InvDate;
        VIr.PayValText = VIr.PayVal;
        RECORDSTORE(VIr,true);
      end;
    end;
    
    if (RepSpec.flags[3]==1) then begin
      OPr.SerNr = -1;
      while (LoopMain(OPr,1,true)) begin
        OPr.PayDateText = OPr.PayDate;
        OPr.CurPayValText = OPr.CurPayVal;
        RECORDSTORE(OPr,true);
      end;
    end;
    
    if (RepSpec.flags[4]==1) then begin
      CLinr.SerNr = -1;
      while (LoopMain(CLinr,1,true)) begin
        CLinr.TransDateText = CLinr.TransDate;
        CLinr.TotalText = CLinr.Total;
        RECORDSTORE(CLinr,true);
      end;
    end;
    
    if (RepSpec.flags[5]==1) then begin
      CLoutr.SerNr = -1;
      while (LoopMain(CLoutr,1,true)) begin
        CLoutr.TransDateText = CLoutr.TransDate;
        CLoutr.TotalText = CLoutr.Total;
        RECORDSTORE(CLoutr,true);
      end;
    end;
    
    if (RepSpec.flags[6]==1) then begin
      IVCashr.SerNr = -1;
      while (LoopMain(IVCashr,1,true)) begin
        IVCashr.InvDateText = IVCashr.InvDate;
        IVCashr.Sum4Text = IVCashr.Sum4;
        RECORDSTORE(IVCashr,true);
      end;
    end;

  return;
end; //Edit***************************Sasha2,16:35 14.12.2016 }

global
updating function Integer ExecuteCrateIPFromIVD(record IVVc IVr,var LongInt IPSerNr)
begin
  record ARVc ARr;
  record IPVc IPr;
  val chk;
  Boolean installmentf,testf;
  row IPVc IPrw;
  Integer res,rownr;
    
    res = 0;
    IPSerNr = -1;
    ARr.InvoiceNr = IVr.SerNr;
    if (ReadFirstMain(ARr,1,true)) then begin
      testf = true;
      if (IVr.InvType!=kInvoiceTypeNormal) then begin testf = false; end;
      if (testf) then begin
        RECORDNEW(IPr);
        rownr = MatRowCnt(IPr);
        ClearRow(IPr,IPrw,1);
        IPrw.InvoiceNr = IVr.SerNr;
        MatRowPut(IPr,rownr,IPrw);
        if (PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf)) then begin
          if (MatRowCnt(IPr)>0) then begin
            if (IPr.SerNr==-1) then begin
              IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,""); 
            end;
            if (RecordStore(IPr,false)) then begin
              IPSerNr = IPr.SerNr;
            end;       
          end;
        end else begin
          res = 23192;
        end;
      end;
    /*end else begin
      res = 1546;  */
    end;

LExecuteCrateIPFromIVD:;  
  ExecuteCrateIPFromIVD = res;
  return;
end;

global //Edit***************************Sasha2,16:12 03.03.2017 {
updating procedure RecalcMarkUpsInPUMn(record RcVc RepSpec)
begin
  record PUVc PUr;
  row PUVc PUrw;
  record INVc INr;
  boolean TrHs,testf;
  integer pos,rwcnt,i;
  string 20 curSerNr;
    
    pos = 0;
    ExtractObj(RepSpec.f1,pos,curSerNr);
    while (nonblank(curSerNr)) begin
      PUr.SerNr = StringToLongInt(curSerNr);
      if (ReadFirstMain(PUr,1,true)) then begin
        rwcnt = matrowcnt(PUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PUr,i,PUrw);
          if (NonBlank(PUrw.ArtCode)) then begin
            if (PUrw.SellPrice==BlankVal) then begin
              INr.Code = PUrw.ArtCode;
              ReadFirstMain(INr,1,true);
              PUrw.SellPrice = INr.UPrice1;
              MatRowPut(PUr,i,PUrw);
              PUVc_PasteSellPrice(PUr,i,true);
              MatRowGet(PUr,i,PUrw);
            end;
            if (PUrw.SellPrice!=BlankVal) then begin
              PUrw.rowGP = ((PUrw.SellPrice/PUrw.CostPrice)-1)*100;
              MatRowPut(PUr,i,PUrw);
            end;
          end;
        end;
        PUSumUp(PUr);
        RECORDSTORE(PUr,true);
      end;
      ExtractObj(RepSpec.f1,pos,curSerNr);
    end;

  return;
end; //Edit***************************Sasha2,16:12 03.03.2017 }

global //Edit***************************Sasha2,16:47 10.03.2017 {
updating procedure CalcCashierSalaryAndMakeTransaction(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record TRVc TRr,TR2r;
  record CUVc CUr;
  record LocationVc Locr;
  date salaryDateMin,salaryDateMax;
  record CashierDefBlock CDBl;
  record BaseCurBlock BaseCurb;
  time blankt;
  Boolean TrHs,testf,proceedF;
  Integer rwcnt,i,sign,pos;
  vector val customerSum;
  val credCard,cashPayment,IncomeTotSum,TrTotsum,salaryCommission,nilv,cashierSelfSaleSum;
  string 255 cashierList,persobj,tstr,locObjs;
  string 20 curObj,selfSaleAcc;
  LongInt nextSalaryTrNr,intYcNum;
  vector boolean cashierWasHandledF;
  array string 255 indexes;
  
    BlockLoad(CDBl);
    BlockLoad(BaseCurb);
    nilv = 1;
    if (CDBl.DaySessionStartTime!=blankt and CDBl.DaySessionEndTime!=blankt) then begin
      if (NonBlank(RepSpec.RegDate)) then begin
        if (CDBl.DaySessionStartTime>=CDBl.DaySessionEndTime) then begin
          salaryDateMin = RepSpec.RegDate;
          salaryDateMax = AddDay(salaryDateMin,1);
        end else begin
          salaryDateMin = RepSpec.RegDate;
          salaryDateMax = RepSpec.RegDate;
        end;
      end else begin
        if (CDBl.DaySessionStartTime>=CDBl.DaySessionEndTime) then begin
          salaryDateMax = CurrentDate;
          salaryDateMin = AddDay(salaryDateMax,-1);
        end else begin
          salaryDateMax = CurrentDate;
          salaryDateMin = CurrentDate;
        end;
      end;
      LogText(0,"Day session start time:" & salaryDateMin & " - Day session end time:" & salaryDateMax);
      proceedF = true;
      intYcNum = GetIntYc(salaryDateMin);
      if (proceedF and intYcNum<=1) then begin
        LogText(1075,"");
        proceedF = false;
      end;
      if (proceedF) then begin
        //check if transaction already exists
        TRr.IntYc = intYcNum;
        TRr.TransDate = salaryDateMin;
        TrHs = true;
        while (LoopKey("IntYc",TRr,2,TrHs)) begin
          if (TRr.IntYc!=intYcNum or TRr.TransDate!=salaryDateMin) then begin TrHs = false; end;
          if (TrHs) then begin
            if (TRr.FileName=="SalaryTRVc") then begin
              TrHs = false;
              proceedF = false;
              LogText(0,"Salary transaction for " & salaryDateMin & " already exists");
            end;
          end;
        end;
      end;
      if (proceedF and Blank(CDBl.DaySessionPMs)) then begin
        LogText(0,"Undefined pay modes for Day Session in CashierDefBlock");
        proceedF = false;
      end;
      if (proceedF) then begin
        IVCashr.InvDate = salaryDateMin;
        TrHs = true;
        IncomeTotSum = 0;
        while (LoopKey("InvDate",IVCashr,1,TrHs)) begin
          testf = true;
          if (IVCashr.InvDate<salaryDateMin or IVCashr.InvDate>salaryDateMax) then begin testf = false; TrHs = false; end;
          if (IVCashr.InvDate==salaryDateMin and IVCashr.TransTime<CDBl.DaySessionStartTime) then begin testf = false; end;
          if (IVCashr.InvDate==salaryDateMax and IVCashr.TransTime>CDBl.DaySessionEndTime) then begin testf = false; end;
          if (IVCashr.OKFlag==0 or IVCashr.Invalid==1) then begin testf = false; end;
          if (blank(IVCashr.DaySessionCashiers)) then begin testf = false; end;
          if (testf) then begin
            if (SetInSet(IVCashr.Location,locObjs)==false) then begin
              if (NonBlank(locObjs)) then begin
                locObjs = locObjs & ",";
              end;
              locObjs = locObjs & IVCashr.Location;
            end;
            pos = 0;
            ExtractObj(IVCashr.DaySessionCashiers,pos,curObj);
            while (nonblank(curObj)) begin
              if (SetInSet(curObj,cashierList)==false) then begin
                if (NonBlank(cashierList)) then begin
                  cashierList = cashierList & ",";
                end;
                cashierList = cashierList & curObj;
              end;
              ExtractObj(IVCashr.DaySessionCashiers,pos,curObj);
            end;
            sign = 1;
            if (IVCashr.InvType==kPOSInvoiceTypeCredit or IVCashr.Sum4<0) then begin
              sign = -1;;
            end;
            customerSum[IVCashr.CustCode] = customerSum[IVCashr.CustCode] + AbsoluteVal(IVCashr.Sum4)*sign;
            credCard = 0;
            cashPayment = 0;
            rwcnt = MatRowCnt(IVCashr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVCashr,i,IVCashrw);
              switch (IVCashrw.stp) begin
                case kInvoiceRowTypeCashPayment:
                  if (SetInSet(IVCashrw.PayMode,CDBl.DaySessionPMs)) then begin
                    cashPayment = cashPayment + AbsoluteVal(IVCashrw.Sum)*sign;
                  end;
                case kInvoiceRowTypeCreditCardPayment:
                  if (SetInSet(IVCashrw.PayMode,CDBl.DaySessionPMs)) then begin
                    credCard = credCard + AbsoluteVal(IVCashrw.Sum)*sign;
                  end;
              end;  
            end;
            if (cashPayment<>0) then begin
              cashPayment = cashPayment - AbsoluteVal(IVCashr.RetValue);
            end;
            if ((cashPayment + credCard)<>0 and (cashPayment + credCard)!=AbsoluteVal(IVCashr.Sum4)) then begin
              LogText(0,"Mismatch between payments and invoice total in ivoice #" & IVCashr.SerNr);
            end;
            IncomeTotSum = IncomeTotSum + cashPayment + credCard;
          end;
        end;
        
        salaryCommission = 800/CountObjects(cashierList);
        RECORDNEW(TRr);
        TRr.RegDate = CurrentDate;
        TRr.RegTime = CurrentTime;
        TRr.TransDate = salaryDateMin;
        TRr.Comment = UsetStr(50016);
        TRr.FileName = "SalaryTRVc";
        tstr = locObjs;
        locObjs = "";
        if (NonBlank(tstr)) then begin
          pos = 0;
          ExtractObj(tstr,pos,curObj);
          while (nonblank(curObj)) begin
            Locr.Code = curObj;
            if (ReadFirstMain(Locr,1,true) and NonBlank(Locr.Objects)) then begin
              if (NonBlank(locObjs)) then begin
                locObjs = locObjs & ",";
              end;
              locObjs = locObjs & Locr.Objects;
            end;
            ExtractObj(tstr,pos,curObj);
          end;
        end;
        if (NonBlank(cashierList) and salaryCommission<>0) then begin
          pos = 0;
          ExtractObj(cashierList,pos,curObj);
          while (nonblank(curObj)) begin
            persobj = locObjs & ",";
            CUr.Code = curObj;
            if (ReadFirstMain(CUr,1,true) and NonBlank(CUr.Objects)) then begin
              persobj = persobj & CUr.Objects & ",";
            end;
            persobj = left(persobj,len(persobj)-1);
            
            //if (IncomeTotSum<>0) then begin
              GetAccName("929",tstr,60);
              AddEuroCurncyTrRow(TRr,"929",persobj,"",tstr,Round(salaryCommission,DefaultRoundMode),false,true,TrTotsum,BaseCurb.BaseCur1,blankval,blankval,blankval,blankval,blankval,blankval,blankval,-1,false,"");
              GetAccName("66",tstr,60);
              AddEuroCurncyTrRow(TRr,"66",persobj,"",tstr,Round(salaryCommission,DefaultRoundMode),false,false,TrTotsum,BaseCurb.BaseCur1,blankval,blankval,blankval,blankval,blankval,blankval,blankval,-1,false,"");
           // end else begin
            //  LogText(0,"IVCash total sum for " & salaryDateMin & " is 0");
            //end;
            
            /*cashierSelfSaleSum = customerSum[curObj];
            switch (CurrentCompany) begin
              case 1:
                selfSaleAcc = "3722";
              case 3:
                selfSaleAcc = "3721";
            end;
            if (cashierSelfSaleSum<>0 and NonBlank(selfSaleAcc)) then begin
              GetAccName("66",tstr,60);
              AddEuroCurncyTrRow(TRr,"66",persobj,"",tstr,cashierSelfSaleSum,false,true,TrTotsum,BaseCurb.BaseCur1,blankval,blankval,blankval,blankval,blankval,blankval,blankval,-1,false,"");
              GetAccName(selfSaleAcc,tstr,60);
              AddEuroCurncyTrRow(TRr,selfSaleAcc,persobj,"",tstr,cashierSelfSaleSum,false,false,TrTotsum,BaseCurb.BaseCur1,blankval,blankval,blankval,blankval,blankval,blankval,blankval,-1,false,"");
            end;
            cashierWasHandledF[curObj] = true;
            */
            ExtractObj(cashierList,pos,curObj);
          end;
        end;
        
        /*GetVectorTags(customerSum,indexes);
        for (i=0;i<indexes.length;i=i+1) begin
          if (cashierWasHandledF[indexes[i]]==false) then begin
            cashierSelfSaleSum = customerSum[indexes[i]];
            CUr.Code = indexes[i];
            if (cashierSelfSaleSum<>0 and ReadFirstMain(CUr,1,true) and CUr.CustCat=="SOTR") then begin
              persobj = locObjs & ",";
              if (NonBlank(CUr.Objects)) then begin
                persobj = persobj & CUr.Objects & ",";
              end;
              persobj = left(persobj,len(persobj)-1);
              switch (CurrentCompany) begin
                case 1:
                  selfSaleAcc = "3722";
                case 3:
                  selfSaleAcc = "3721";
              end;
              if (cashierSelfSaleSum<>0 and NonBlank(selfSaleAcc)) then begin
                GetAccName("66",tstr,60);
                AddEuroCurncyTrRow(TRr,"66",persobj,"",tstr,cashierSelfSaleSum,false,true,TrTotsum,BaseCurb.BaseCur1,blankval,blankval,blankval,blankval,blankval,blankval,blankval,-1,false,"");
                GetAccName(selfSaleAcc,tstr,60);
                AddEuroCurncyTrRow(TRr,selfSaleAcc,persobj,"",tstr,cashierSelfSaleSum,false,false,TrTotsum,BaseCurb.BaseCur1,blankval,blankval,blankval,blankval,blankval,blankval,blankval,-1,false,"");
              end;
            end;
          end;
        end;*/
        
        if (MatRowCnt(TRr)>0) then begin
          TR2r.IntYc = intYcNum;
          if (ReadLastMain(TR2r,1,true)) then begin
            nextSalaryTrNr = TR2r.Number + 1;
            TR2r.Number = nextSalaryTrNr;
            while (ReadFirstMain(TR2r,2,true)) begin
              nextSalaryTrNr = nextSalaryTrNr + 1;
              TR2r.Number = nextSalaryTrNr;
            end;
          end else begin
            nextSalaryTrNr = 1;
          end;
          TRr.Number = nextSalaryTrNr;
          TRr.IntYc = intYcNum;
          TRSumup(TRr,nilv);
          if (RECORDSTORE(TRr,false)) then begin
            LogText(0,"Salary transaction for " & salaryDateMin & " is created");
          end else begin
            LogText(0,"Salary transaction for " & salaryDateMin & " is failed");
          end;
        end;
      end;
    end else begin
      LogText(0,"Undefined Day Session start/end time in CashierDefBlock");
    end;

  return;
end; //Edit***************************Sasha2,16:48 10.03.2017 }

global //Edit***************************Sasha2,17:51 13.03.2017 {
updating procedure MakeSalaryTransactionMn(record RcVc RepSpec)
begin
  
    if (NonBlankDate(RepSpec.RegDate)) then begin
      CalcCashierSalaryAndMakeTransaction(RepSpec);
    end;

  return;
end; //Edit***************************Sasha2,17:51 13.03.2017 }

global //Edit***************************Sasha2,17:59 13.03.2017 {
updating procedure CustTimeTableAction()
begin
  record RcVc RepSpec;
  record CashierDefBlock CDBl;
  time blankt,t1,t2,t3,curt,curtnew;
  string 5 hr,mn;
  integer minute,oldComp;

    oldComp = CurrentCompany;
    
    t1 = StringToTime("8:00");
    t2 = StringToTime("10:00");
    t3 = StringToTime("12:00");
    
    curt = CurrentTime; 
    hr = GetHour(curt);
    if (len(hr)==1) then begin
    	hr = "0" & hr;
    end;
    mn = GetMinute(curt);
    minute = StringToInt(mn);
    if (len(mn)==1) then begin
    	mn = "0" & mn;
    end;
    curtnew = StringToTime(hr & ":" & mn);
    
    
  
    SetCompany(1,false);
      LogText(0,"Switched to company #" & CurrentCompany);
      BlockLoad(CDBl);
      logtext(0,"CustTimeTableAction " & CDBl.DaySessionStartTime);
      logtext(0,"DaySessionEndTime " & CDBl.DaySessionEndTime);
      logtext(0,"curtnew " & curtnew);
      logtext(0,"AddMinutes(CDBl.DaySessionEndTime,15) " & AddMinutes(CDBl.DaySessionEndTime,15));
      
      if (CDBl.DaySessionStartTime!=blankt and CDBl.DaySessionEndTime!=blankt and curtnew==AddMinutes(CDBl.DaySessionEndTime,15)) then begin
        RECORDNEW(RepSpec);
        CalcCashierSalaryAndMakeTransaction(RepSpec);
      end;
   SetCompany(3,false);
      LogText(0,"Switched to company #" & CurrentCompany);
      BlockLoad(CDBl);
      logtext(0,"CustTimeTableAction " & CDBl.DaySessionStartTime);
      logtext(0,"DaySessionEndTime " & CDBl.DaySessionEndTime);
      logtext(0,"curtnew " & curtnew);
      logtext(0,"AddMinutes(CDBl.DaySessionEndTime,15) " & AddMinutes(CDBl.DaySessionEndTime,15));
      
      if (CDBl.DaySessionStartTime!=blankt and CDBl.DaySessionEndTime!=blankt and curtnew==AddMinutes(CDBl.DaySessionEndTime,15)) then begin
        RECORDNEW(RepSpec);
        CalcCashierSalaryAndMakeTransaction(RepSpec);
      end;
    
    ResetCompany(oldComp);
    LogText(0,"Returned to company #" & CurrentCompany);
		
return;
end; //Edit***************************Sasha2,17:59 13.03.2017 }


global 
updating procedure RHistRemoveMn(record RcVc RepSpec)
begin
	record RHistVc RHr;
	boolean TrHs;
	
	TrHs = true;
  while(loopmain(RHr,1,TrHs))begin
  	if(fileexists("stop"))then begin
  		TrHs = false;
  	end;
  	if(RHr.TransDate<addmonth(currentdate,-3) or blank(RHr.User))then begin
  		recorddelete(RHr);
  		stepback(RHr);
  	end;
  end;
  return;
end;

global webpublic updating procedure WebRefreshBarCodes()
begin
	  record BarcodeVc Barcoder,oldBarcoder;
		
		logtext(0,"WebRefreshBarCodes");
		
		setcompany(1,false);
		resetloop(Barcoder);
		while(loopmain(Barcoder,1,true))begin
			recordcopy(oldBarcoder,Barcoder);
			recordupdate(oldBarcoder,Barcoder,true);
		end;
		setcompany(3,false);
		resetloop(Barcoder);
		while(loopmain(Barcoder,1,true))begin
			recordcopy(oldBarcoder,Barcoder);
			recordupdate(oldBarcoder,Barcoder,true);
		end;
		logtext(0,"WebRefreshBarCodes");
return;
end;